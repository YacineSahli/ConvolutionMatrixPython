#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 02, 2018 02:19:46 PM CST  platform: Windows NT
import sys
from PIL import Image
from functools import reduce
import threading
import queue

import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import time
def set_Tk_var():
    global matrix00
    matrix00 = tk.StringVar(value='0')
    global matrix01
    matrix01 = tk.StringVar(value='0')
    global matrix02
    matrix02 = tk.StringVar(value='0')
    global matrix03
    matrix03 = tk.StringVar(value='0')
    global matrix04
    matrix04 = tk.StringVar(value='0')
    global matrix10
    matrix10 = tk.StringVar(value='0')
    global matrix11
    matrix11 = tk.StringVar(value='0')
    global matrix12
    matrix12 = tk.StringVar(value='0')
    global matrix13
    matrix13 = tk.StringVar(value='0')
    global matrix14
    matrix14 = tk.StringVar(value='0')
    global matrix20
    matrix20 = tk.StringVar(value='0')
    global matrix21
    matrix21 = tk.StringVar(value='0')
    global matrix22
    matrix22 = tk.StringVar(value='1')
    global matrix23
    matrix23 = tk.StringVar(value='0')
    global matrix24
    matrix24 = tk.StringVar(value='0')
    global matrix30
    matrix30 = tk.StringVar(value='0')
    global matrix31
    matrix31 = tk.StringVar(value='0')
    global matrix32
    matrix32 = tk.StringVar(value='0')
    global matrix33
    matrix33 = tk.StringVar(value='0')
    global matrix34
    matrix34 = tk.StringVar(value='0')
    global matrix40
    matrix40 = tk.StringVar(value='0')
    global matrix41
    matrix41 = tk.StringVar(value='0')
    global matrix42
    matrix42 = tk.StringVar(value='0')
    global matrix43
    matrix43 = tk.StringVar(value='0')
    global matrix44
    matrix44 = tk.StringVar(value='0')
    global borderAction
    borderAction = tk.StringVar(value='0')
    global divisor
    divisor = tk.StringVar(value='1')
    global grayscale
    grayscale = tk.StringVar(value='0')
    global resize
    resize = tk.StringVar(value='1')
    global progress_var
    progress_var = tk.DoubleVar(0)
    global step
    step = tk.DoubleVar(0)
def applyConvolution(p1):
    try:
        p1.t.isAlive()
    except AttributeError as e:
        pass
    else:
        if(p1.t.isAlive()):
            return
    if(p1.rawInputImage != None):
        #  Create a thumbnail
        size_x, size_y = p1.rawInputImage.size
        if(size_x > 64 or size_y > 64):
            if(size_x > size_y):
                wpercent = (256/float(size_x))
                hsize = int((float(size_y)*float(wpercent)))
                temp = p1.rawInputImage.resize((256,hsize), Image.ANTIALIAS)
            else:
                hpercent = (256/float(size_y))
                wsize = int((float(size_x)*float(hpercent)))
                temp = p1.rawInputImage.resize((wsize,256), Image.ANTIALIAS)
        else:
            temp = p1.rawInputImage

        content = list(temp.getdata())
        size_x, size_y = temp.size
        temp = [content[i:i+size_x] for i in range(0, len(content), size_x)]
        progress_var.set(0)
        step.set(1)
        temp = convolution(temp, matrix())
        size_x, size_y = len(temp), len(temp[0])
        new_image = Image.new('RGB', (size_y, size_x))
        new_image.putdata(reduce(lambda a,b:a+b, temp))
        temp = new_image
        temp.show()

def openfile(p1):
    try:
        p1.t.isAlive()
    except AttributeError as e:
        pass
    else:
        if(p1.t.isAlive()):
            return
    p1.inputFileName = filedialog.askopenfilename(initialdir = "../",title = "Select image",filetypes = (("jpeg files","*.jpg"),("all files","*.*"),("png files","*.png")))
    if p1.inputFileName == '':
        return
    p1.inputImage = load(p1)

def save(p1):
    try:
        p1.t.isAlive()
    except AttributeError as e:
        pass
    else:
        if(p1.t.isAlive()):
            return
    p1.outputFileName = filedialog.asksaveasfilename(initialdir = "../",title = "enter filename",filetypes = (("jpeg files","*.jpg"),("all files","*.*")))
    if p1.outputFileName == '':
        return
    p1.queue = queue.Queue()
    if(resize.get() == '1'):
        size_x, size_y = p1.rawInputImage.size
        if(size_x > 1024 or size_y > 1024):
            if(size_x > size_y):
                wpercent = (1024/float(size_x))
                hsize = int((float(size_y)*float(wpercent)))
                temp = p1.rawInputImage.resize((1024,hsize), Image.ANTIALIAS)
            else:
                hpercent = (1024/float(size_y))
                wsize = int((float(size_x)*float(hpercent)))
                temp = p1.rawInputImage.resize((wsize,1024), Image.ANTIALIAS)
        else:
            temp = p1.rawInputImage

        content = list(temp.getdata())
        size_x, size_y = temp.size
        temp = [content[i:i+size_x] for i in range(0, len(content), size_x)]
        progress_var.set(0)
        step.set(1.0/1024.0)
        p1.t = ThreadedTask(temp, p1.queue)
        p1.t.start()
    else:
        progress_var.set(0)
        step.set(float(float(1)/float(len(p1.inputImage))))
        p1.t = ThreadedTask(p1.inputImage, p1.queue)
        p1.t.start()
    root.after(100, process_queue, p1)



def setPreset(p1):
    if(p1 == "sharpen"):
        divisor.set("1")
        matrix00.set('0')
        matrix01.set('0')
        matrix02.set('0')
        matrix03.set('0')
        matrix04.set('0')
        matrix10.set('0')
        matrix11.set('0')
        matrix12.set('-1')
        matrix13.set('-0')
        matrix14.set('0')
        matrix20.set('0')
        matrix21.set('-1')
        matrix22.set('5')
        matrix23.set('-1')
        matrix24.set('0')
        matrix30.set('0')
        matrix31.set('0')
        matrix32.set('-1')
        matrix33.set('0')
        matrix34.set('0')
        matrix40.set('0')
        matrix41.set('0')
        matrix42.set('0')
        matrix43.set('0')
        matrix44.set('0')
    elif(p1 == "box_blur"):
        divisor.set("25")
        matrix00.set('1')
        matrix01.set('1')
        matrix02.set('1')
        matrix03.set('1')
        matrix04.set('1')
        matrix10.set('1')
        matrix11.set('1')
        matrix12.set('1')
        matrix13.set('1')
        matrix14.set('1')
        matrix20.set('1')
        matrix21.set('1')
        matrix22.set('1')
        matrix23.set('1')
        matrix24.set('1')
        matrix30.set('1')
        matrix31.set('1')
        matrix32.set('1')
        matrix33.set('1')
        matrix34.set('1')
        matrix40.set('1')
        matrix41.set('1')
        matrix42.set('1')
        matrix43.set('1')
        matrix44.set('1')
    elif(p1 == "gaussian_blur_3x3"):
        divisor.set("16")
        matrix00.set('0')
        matrix01.set('0')
        matrix02.set('0')
        matrix03.set('0')
        matrix04.set('0')
        matrix10.set('0')
        matrix11.set('1')
        matrix12.set('2')
        matrix13.set('1')
        matrix14.set('0')
        matrix20.set('0')
        matrix21.set('2')
        matrix22.set('4')
        matrix23.set('2')
        matrix24.set('0')
        matrix30.set('0')
        matrix31.set('1')
        matrix32.set('2')
        matrix33.set('1')
        matrix34.set('0')
        matrix40.set('0')
        matrix41.set('0')
        matrix42.set('0')
        matrix43.set('0')
        matrix44.set('0')
    elif(p1 == "gaussian_blur_5x5"):
        divisor.set("256")
        matrix00.set('1')
        matrix01.set('4')
        matrix02.set('6')
        matrix03.set('4')
        matrix04.set('1')
        matrix10.set('4')
        matrix11.set('16')
        matrix12.set('24')
        matrix13.set('16')
        matrix14.set('4')
        matrix20.set('6')
        matrix21.set('24')
        matrix22.set('36')
        matrix23.set('24')
        matrix24.set('6')
        matrix30.set('4')
        matrix31.set('16')
        matrix32.set('24')
        matrix33.set('16')
        matrix34.set('4')
        matrix40.set('1')
        matrix41.set('4')
        matrix42.set('6')
        matrix43.set('4')
        matrix44.set('1')
    elif(p1 == "emboss"):
        divisor.set("1")
        matrix00.set('0')
        matrix01.set('0')
        matrix02.set('0')
        matrix03.set('0')
        matrix04.set('0')
        matrix10.set('0')
        matrix11.set('-2')
        matrix12.set('-1')
        matrix13.set('0')
        matrix14.set('0')
        matrix20.set('0')
        matrix21.set('-1')
        matrix22.set('1')
        matrix23.set('1')
        matrix24.set('0')
        matrix30.set('0')
        matrix31.set('0')
        matrix32.set('1')
        matrix33.set('2')
        matrix34.set('0')
        matrix40.set('0')
        matrix41.set('0')
        matrix42.set('0')
        matrix43.set('0')
        matrix44.set('0')
    elif(p1 == "unsharpen"):
        divisor.set("-256")
        matrix00.set('1')
        matrix01.set('4')
        matrix02.set('6')
        matrix03.set('4')
        matrix04.set('1')
        matrix10.set('4')
        matrix11.set('16')
        matrix12.set('24')
        matrix13.set('16')
        matrix14.set('4')
        matrix20.set('6')
        matrix21.set('24')
        matrix22.set('-476')
        matrix23.set('24')
        matrix24.set('6')
        matrix30.set('4')
        matrix31.set('16')
        matrix32.set('24')
        matrix33.set('16')
        matrix34.set('4')
        matrix40.set('1')
        matrix41.set('4')
        matrix42.set('6')
        matrix43.set('4')
        matrix44.set('1')

def matrix():
    return [[(float)(matrix00.get())/(float)(divisor.get()),(float)(matrix01.get())/(float)(divisor.get()),(float)(matrix02.get())/(float)(divisor.get()),(float)(matrix03.get())/(float)(divisor.get()),(float)(matrix04.get())/(float)(divisor.get())],[(float)(matrix10.get())/(float)(divisor.get()),(float)(matrix11.get())/(float)(divisor.get()),(float)(matrix12.get())/(float)(divisor.get()),(float)(matrix13.get())/(float)(divisor.get()),(float)(matrix14.get())/(float)(divisor.get())],[(float)(matrix20.get())/(float)(divisor.get()),(float)(matrix21.get())/(float)(divisor.get()),(float)(matrix22.get())/(float)(divisor.get()),(float)(matrix23.get())/(float)(divisor.get()),(float)(matrix24.get())/(float)(divisor.get())],[(float)(matrix30.get())/(float)(divisor.get()),(float)(matrix31.get())/(float)(divisor.get()),(float)(matrix32.get())/(float)(divisor.get()),(float)(matrix33.get())/(float)(divisor.get()),(float)(matrix34.get())/(float)(divisor.get())],[(float)(matrix40.get())/(float)(divisor.get()),(float)(matrix41.get())/(float)(divisor.get()),(float)(matrix42.get())/(float)(divisor.get()),(float)(matrix43.get())/(float)(divisor.get()),(float)(matrix44.get())/(float)(divisor.get())]]
def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None



def load(p1):
    """ Given a filename that matches an image file,
    return a list of lists of tuples corresponding to the list of
    lines of pixels (R, G, B) of the image. """

    image = Image.open(p1.inputFileName, 'r').convert('RGB')
    p1.rawInputImage = image
    content = list(image.getdata())
    size_x, size_y = image.size
    return [content[i:i+size_x] for i in range(0, len(content), size_x)]



def pixel(img,i,j):
    if borderAction.get() == "0": #Extend
        if i<0:
            if j<0 :
                return img[0][0]
            elif j>=len(img[0]):
                return img[0][len(img[0])-1]
            else:
                return img[0][j]
        elif i>=len(img) :
            if j<0 :
                return img[len(img)-1][0]
            elif j>=len(img[0]):
                return img[len(img)-1][len(img[0])-1]
            else:
                return img[len(img)-1][j]
        else:
            if j<0 :
                return img[i][0]
            elif j>=len(img[0]):
                return img[i][len(img[0])-1]
            else:
                return img[i][j]
    if borderAction.get() == "1": #Wrap
        if i<0:
            if j<0 :
                return img[len(img)-1+i][len(img[0])-1+j]
            elif j>=len(img[0]):
                return img[len(img)-1+i][j-len(img[0])-1]
            else:
                return img[len(img)-1+i][j]
        elif i>=len(img) :
            if j<0 :
                return img[i-len(img)-1][len(img[0])-1+j]
            elif j>=len(img[0]):
                return img[i-len(img)-1][j-len(img[0])-1]
            else:
                return img[i-len(img)-1][j]
        else:
            if j<0 :
                return img[i][len(img[0])-1+j]
            elif j>=len(img[0]):
                return img[i][j-len(img[0])-1]
            else:
                return img[i][j]
    if borderAction.get() == "2":  #Mirror
        if i<0:
            if j<0 :
                return img[-i][-j]
            elif j>=len(img[0]):
                return img[-i][2*len(img[0])-2-j]
            else:
                return img[-i][j]
        elif i>=len(img) :
            if j<0 :
                return img[2*len(img)-2-i][-j]
            elif j>=len(img[0]):
                return img[2*len(img)-2-i][2*len(img[0])-2-j]
            else:
                return img[2*len(img)-2-i][j]
        else:
            if j<0 :
                return img[i][-j]
            elif j>=len(img[0]):
                return img[i][2*len(img[0])-2-j]
            else:
                return img[i][j]

def appliquer_convolution(img,mat,i,j):
    l1=len(mat)//2
    l2=len(mat[0])//2
    (xf,yf,zf)=(0,0,0)
    for a in mat:
        for b in a:
            (x,y,z)=pixel(img,i-l1,j-l2)
            xf=xf+x*b
            yf=yf+y*b
            zf=zf+z*b
            l2=l2-1
            l1=l1-1
            l2=len(mat[0])//2
    if(((int)(grayscale.get())) == 1 ):
        v = int(0.2125*xf + 0.7154 * yf + 0.0721 *zf)
        xf=v
        yf=v
        zf=v
    return ((int)(xf),(int)(yf),(int)(zf))

def convolution(mat_img,mat):
    l=[]
    for i in range(len(mat_img)):
        c=[]
        progress_var.set(progress_var.get()+ step.get())
        # print(step.get())
        # print(progress_var.get())
        for j in range(len(mat_img[i])):
            c.append(appliquer_convolution(mat_img,mat,i,j))
        l.append(c)
    return l
print("Convolution Done")

def greyscale(mat_image):
    grey_image =[]
    for i in mat_image:
        l=[]
        for j in i:
            R = j[0]
            G = j[1]
            B = j[2]
            v = int(0.2125*R + 0.7154 * G + 0.0721 * B)
            l.append((v,v,v))
        grey_image.append(l)
    return grey_image

def process_queue(p1):
    try:
        p1.outputImage = p1.queue.get(0)
    except queue.Empty:
        root.after(1000, process_queue, p1)
    else:
        """ Stores the given image into a file. The name
             of the file is set to <filename>.<extension> which is
            'new.jpg' by default. """


        size_x, size_y = len(p1.outputImage), len(p1.outputImage[0])
        new_image = Image.new('RGB', (size_y, size_x))
        new_image.putdata(reduce(lambda a,b:a+b, p1.outputImage))
        new_image.save('%s.jpg' % (p1.outputFileName))
class ThreadedTask(threading.Thread):
    def __init__(self, inputImage, queue):
        threading.Thread.__init__(self)
        self.inputImage = inputImage
        self.queue = queue
    def run(self):
        res  = convolution(self.inputImage, matrix())
        self.queue.put(res)

if __name__ == '__main__':
    import MainWindow
    MainWindow.vp_start_gui()


